{
	// Place your snippets for ruby here. Each snippet is defined under a snippet name and has a prefix, body and
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log(\'$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"if": {
		"prefix": "if",
		"body": [
			"if $1",
			"\t$2",
			"end"
		],
		"description": "if"
	},
	"ife": {
		"prefix": "ife",
		"body": [
			"if $1",
			"\t$2",
			"else",
			"\t$3",
			"end"
		],
		"description": "if-else"
	},
	"else": {
		"prefix": "else",
		"body": [
			"else",
		],
		"description": "else"
	},
	"end": {
		"prefix": "end",
		"body": [
			"end",
		],
		"description": "end"
	},
	"each": {
		"prefix": "each",
		"body": [
			"${1:variable}.each do |${2:loop_variable}|",
			"\t$3",
			"end"
		],
		"description": "rails each"
	},
	"map": {
		"prefix": "map",
		"body": [
			"${1:variable}.map do |${2:loop_variable}|",
			"\t$3",
			"end"
		],
		"description": "rails map"
	},
	"def": {
		"prefix": "def",
		"body": [
			"def ${1:name}",
			"\t$2",
			"end"
		],
		"description": "def method"
	},
	"begin": {
		"prefix": "begin",
		"body": [
			"begin",
			"\t$1",
			"rescue ${2:exception} => e",
			"\t$3",
			"end"
		],
		"description": "begin-end block"
	},
	"Class definition with initialize": {
		"prefix": "class",
		"body": [
			"class ${1:name}${2: < ${3:super}}",
			"\tdef initialize(${4:args})",
			"\t\t$5",
			"\tend",
			"end"
		],
		"description": "Class with intialize"
	},
	"Application Service Class": {
		"prefix": "appser",
		"body": [
			"class ${1:name}",
			"\tinclude ApplicationService\n",
			"\tdef initialize(${4:arg})",
			"\t\t@${4} = $4",
			"\tend\n",
			"\tdef call",
			"\t\t$0",
			"\tend",
			"end"
		],
		"description": "Class with intialize"
	},
	"rspec_skeleton": {
		"prefix": "rspec",
		"body": [
			"require \"rails_helper\"\n",
			"RSpec.describe ${1:User}, type: ${2:|model,system,request|} do",
			"\t$0",
			"end"
		],
		"description": "RSpec test skeleton"
	},
	"rspec_subject": {
		"prefix": [
			"sub",
			"subject"
		],
		"body": "subject(:${1:subject}) { ${2:} }$0",
		"description": "RSpec subject"
	},
	"rspec_describe": {
		"prefix": [
			"des",
			"describe"
		],
		"body": "describe \"${1:}\" do\n  ${2:}$0\nend\n",
		"description": "RSpec describe case"
	},
	"rspec_context": {
		"prefix": [
			"con",
			"context"
		],
		"body": "context \"when ${1:some case}\" do\n  ${2:}$0\nend\n",
		"description": "RSpec context case"
	},
	"rspec_let": {
		"prefix": "let",
		"body": "let(:${1:object}) { $0 }",
		"description": "let"
	},
	"rspec_let!": {
		"prefix": "let!",
		"body": "let!(:${1:object}) { $0 }",
		"description": "let!"
	},
	"rspec_it": {
		"prefix": "it",
		"body": [
			"it \"${1:has some behaviour}\" do",
			"\t${2:}$0",
			"end"
		],
		"description": "example"
	},
	"rspec_expect": {
		"prefix": [
			"exp",
			"expect"
		],
		"body": "expect(${1:subject}).to ${2:matcher}$0",
		"description": "expect(subject).to something"
	},
	"rspec_allow": {
		"prefix": "allow",
		"body": "allow(${1:collaborator}).to receive(:${2:message})${3:.with(${4:args})}${5: {(${6:result})}}$0",
		"description": "Method stub that returns values"
	},
	"rspec_expect_have_received": {
		"prefix": [
			"exphr",
			"expecthr"
		],
		"body": "expect(${1:collaborator}).to have_received(:${2:message})${3:.with(${4:args})}$0",
		"description": "Expect spy to have_received"
	},
	"rspec_before": {
		"prefix": [
			"bef",
			"before"
		],
		"body": [
			"before${1:(${2|:all,:each,:suite,:context,:example|})} do",
			"\t$0",
			"end"
		],
		"description": "RSpec before"
	},
	"rspec_before_one_line": {
		"prefix": [
			"befo",
			"beforeo"
		],
		"body": "before { $0 }",
		"description": "RSpec before"
	},
}
